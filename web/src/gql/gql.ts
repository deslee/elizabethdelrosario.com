/* eslint-disable */
import * as types from './graphql';
import { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';

/**
 * Map of all GraphQL operations in the project.
 *
 * This map has several performance disadvantages:
 * 1. It is not tree-shakeable, so it will include all operations in the project.
 * 2. It is not minifiable, so the string of a GraphQL query will be multiple times inside the bundle.
 * 3. It does not support dead code elimination, so it will add unused operations.
 *
 * Therefore it is highly recommended to use the babel or swc plugin for production.
 */
const documents = {
    "\n    query Post($slug:String!) {\n      findSlug(modelName: \"post\", slug: $slug) {\n        __typename\n        ...on PostEntityResponse {\n          data {\n            id\n            attributes {\n              __typename\n              title\n              slug\n              body\n            }\n          }\n        }\n      }\n    }\n  ": types.PostDocument,
    "\n    query Category($slug:String!) {\n      findSlug(modelName: \"category\", slug: $slug) {\n        __typename\n        ...on CategoryEntityResponse {\n          data {\n            id\n            attributes {\n              __typename\n              name\n              slug\n              posts {\n                data {\n                  id\n                  attributes {\n                    title\n                    slug\n                    body\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  ": types.CategoryDocument,
    "\n    query Site {\n      site {\n        data {\n          attributes {\n            title\n            favicon {\n              data {\n                attributes {\n                  url\n                }\n              }\n            }\n            header {\n              data {\n                attributes {\n                  url\n                  placeholder\n                  alternativeText\n                }\n              }\n            }\n            subtitle\n            categories {\n              data {\n                attributes {\n                  name\n                  slug\n                }\n              }\n            }\n            footer\n            socials {\n              id\n              icon\n              url\n            }\n          }\n        }\n      }\n    }\n  ": types.SiteDocument,
    "\n    query FrontPage {\n      frontPage {\n        data {\n          attributes {\n            featuredPosts {\n              data {\n                id\n                attributes {\n                  slug\n                  title\n                  body\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  ": types.FrontPageDocument,
    "\n    query Resume {\n      resume {\n        data {\n          id\n          attributes {\n            title\n            email\n            intro\n            experience {\n              id\n              title\n              position\n              startDate\n              endDate\n              description\n              icon {\n                data {\n                  attributes {\n                    url\n                    width\n                    height\n                    alternativeText\n                  }\n                }\n              }\n            }\n            software {\n              id\n              name\n              icon {\n                data {\n                  attributes {\n                    url\n                    width\n                    height\n                    alternativeText\n                  }\n                }\n              }\n            }\n            education {\n              id\n              name\n              degree\n              graduationDate\n              description\n              icon {\n                data {\n                  attributes {\n                    url\n                    width\n                    height\n                    alternativeText\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  ": types.ResumeDocument,
};

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 *
 *
 * @example
 * ```ts
 * const query = graphql(`query GetUser($id: ID!) { user(id: $id) { name } }`);
 * ```
 *
 * The query argument is unknown!
 * Please regenerate the types.
 */
export function graphql(source: string): unknown;

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query Post($slug:String!) {\n      findSlug(modelName: \"post\", slug: $slug) {\n        __typename\n        ...on PostEntityResponse {\n          data {\n            id\n            attributes {\n              __typename\n              title\n              slug\n              body\n            }\n          }\n        }\n      }\n    }\n  "): (typeof documents)["\n    query Post($slug:String!) {\n      findSlug(modelName: \"post\", slug: $slug) {\n        __typename\n        ...on PostEntityResponse {\n          data {\n            id\n            attributes {\n              __typename\n              title\n              slug\n              body\n            }\n          }\n        }\n      }\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query Category($slug:String!) {\n      findSlug(modelName: \"category\", slug: $slug) {\n        __typename\n        ...on CategoryEntityResponse {\n          data {\n            id\n            attributes {\n              __typename\n              name\n              slug\n              posts {\n                data {\n                  id\n                  attributes {\n                    title\n                    slug\n                    body\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  "): (typeof documents)["\n    query Category($slug:String!) {\n      findSlug(modelName: \"category\", slug: $slug) {\n        __typename\n        ...on CategoryEntityResponse {\n          data {\n            id\n            attributes {\n              __typename\n              name\n              slug\n              posts {\n                data {\n                  id\n                  attributes {\n                    title\n                    slug\n                    body\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query Site {\n      site {\n        data {\n          attributes {\n            title\n            favicon {\n              data {\n                attributes {\n                  url\n                }\n              }\n            }\n            header {\n              data {\n                attributes {\n                  url\n                  placeholder\n                  alternativeText\n                }\n              }\n            }\n            subtitle\n            categories {\n              data {\n                attributes {\n                  name\n                  slug\n                }\n              }\n            }\n            footer\n            socials {\n              id\n              icon\n              url\n            }\n          }\n        }\n      }\n    }\n  "): (typeof documents)["\n    query Site {\n      site {\n        data {\n          attributes {\n            title\n            favicon {\n              data {\n                attributes {\n                  url\n                }\n              }\n            }\n            header {\n              data {\n                attributes {\n                  url\n                  placeholder\n                  alternativeText\n                }\n              }\n            }\n            subtitle\n            categories {\n              data {\n                attributes {\n                  name\n                  slug\n                }\n              }\n            }\n            footer\n            socials {\n              id\n              icon\n              url\n            }\n          }\n        }\n      }\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query FrontPage {\n      frontPage {\n        data {\n          attributes {\n            featuredPosts {\n              data {\n                id\n                attributes {\n                  slug\n                  title\n                  body\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  "): (typeof documents)["\n    query FrontPage {\n      frontPage {\n        data {\n          attributes {\n            featuredPosts {\n              data {\n                id\n                attributes {\n                  slug\n                  title\n                  body\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query Resume {\n      resume {\n        data {\n          id\n          attributes {\n            title\n            email\n            intro\n            experience {\n              id\n              title\n              position\n              startDate\n              endDate\n              description\n              icon {\n                data {\n                  attributes {\n                    url\n                    width\n                    height\n                    alternativeText\n                  }\n                }\n              }\n            }\n            software {\n              id\n              name\n              icon {\n                data {\n                  attributes {\n                    url\n                    width\n                    height\n                    alternativeText\n                  }\n                }\n              }\n            }\n            education {\n              id\n              name\n              degree\n              graduationDate\n              description\n              icon {\n                data {\n                  attributes {\n                    url\n                    width\n                    height\n                    alternativeText\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  "): (typeof documents)["\n    query Resume {\n      resume {\n        data {\n          id\n          attributes {\n            title\n            email\n            intro\n            experience {\n              id\n              title\n              position\n              startDate\n              endDate\n              description\n              icon {\n                data {\n                  attributes {\n                    url\n                    width\n                    height\n                    alternativeText\n                  }\n                }\n              }\n            }\n            software {\n              id\n              name\n              icon {\n                data {\n                  attributes {\n                    url\n                    width\n                    height\n                    alternativeText\n                  }\n                }\n              }\n            }\n            education {\n              id\n              name\n              degree\n              graduationDate\n              description\n              icon {\n                data {\n                  attributes {\n                    url\n                    width\n                    height\n                    alternativeText\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  "];

export function graphql(source: string) {
  return (documents as any)[source] ?? {};
}

export type DocumentType<TDocumentNode extends DocumentNode<any, any>> = TDocumentNode extends DocumentNode<  infer TType,  any>  ? TType  : never;